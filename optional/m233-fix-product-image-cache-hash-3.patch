Fixes issue with wrong product image hash generation for multistores with watermarks enabled.
Original CS issue: https://creativestyle.atlassian.net/browse/P2G-1263
Magento issue & patch: https://github.com/magento/magento2/issues/19710#issuecomment-579270288
Must be applied along with m233-fix-product-image-cache-hash-1 and m233-fix-product-image-cache-hash-2, for framework and module-catalog.

diff --git a/Service/ImageResize.php b/Service/ImageResize.php
index 6da48ee..ee0b501 100644
--- a/Service/ImageResize.php
+++ b/Service/ImageResize.php
@@ -7,10 +7,12 @@ declare(strict_types=1);
 
 namespace Magento\MediaStorage\Service;
 
+use Generator;
 use Magento\Catalog\Helper\Image as ImageHelper;
 use Magento\Catalog\Model\Product\Image\ParamsBuilder;
 use Magento\Catalog\Model\View\Asset\ImageFactory as AssertImageFactory;
 use Magento\Framework\App\Area;
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\Exception\NotFoundException;
 use Magento\Framework\Filesystem;
 use Magento\Framework\Image;
@@ -19,10 +21,12 @@ use Magento\Catalog\Model\Product\Media\ConfigInterface as MediaConfig;
 use Magento\Framework\App\State;
 use Magento\Framework\View\ConfigInterface as ViewConfig;
 use \Magento\Catalog\Model\ResourceModel\Product\Image as ProductImage;
+use Magento\Store\Model\StoreManagerInterface;
 use Magento\Theme\Model\Config\Customization as ThemeCustomizationConfig;
 use Magento\Theme\Model\ResourceModel\Theme\Collection;
 use Magento\Framework\App\Filesystem\DirectoryList;
 use Magento\MediaStorage\Helper\File\Storage\Database;
+use Magento\Theme\Model\Theme;
 
 /**
  * Image resize service.
@@ -90,6 +94,10 @@ class ImageResize
      * @var Database
      */
     private $fileStorageDatabase;
+    /**
+     * @var StoreManagerInterface
+     */
+    private $storeManager;
 
     /**
      * @param State $appState
@@ -103,6 +111,8 @@ class ImageResize
      * @param Collection $themeCollection
      * @param Filesystem $filesystem
      * @param Database $fileStorageDatabase
+     * @param StoreManagerInterface $storeManager
+     * @throws \Magento\Framework\Exception\FileSystemException
      * @internal param ProductImage $gallery
      * @SuppressWarnings(PHPMD.ExcessiveParameterList)
      */
@@ -117,7 +127,8 @@ class ImageResize
         ThemeCustomizationConfig $themeCustomizationConfig,
         Collection $themeCollection,
         Filesystem $filesystem,
-        Database $fileStorageDatabase = null
+        Database $fileStorageDatabase = null,
+        StoreManagerInterface $storeManager = null
     ) {
         $this->appState = $appState;
         $this->imageConfig = $imageConfig;
@@ -131,7 +142,8 @@ class ImageResize
         $this->mediaDirectory = $filesystem->getDirectoryWrite(DirectoryList::MEDIA);
         $this->filesystem = $filesystem;
         $this->fileStorageDatabase = $fileStorageDatabase ?:
-            \Magento\Framework\App\ObjectManager::getInstance()->get(Database::class);
+            ObjectManager::getInstance()->get(Database::class);
+        $this->storeManager = $storeManager ?? ObjectManager::getInstance()->get(StoreManagerInterface::class);
     }
 
     /**
@@ -163,10 +175,10 @@ class ImageResize
      * Create resized images of different sizes from themes.
      *
      * @param array|null $themes
-     * @return \Generator
+     * @return Generator
      * @throws NotFoundException
      */
-    public function resizeFromThemes(array $themes = null): \Generator
+    public function resizeFromThemes(array $themes = null): Generator
     {
         $count = $this->productImage->getCountUsedProductImages();
         if (!$count) {
@@ -226,7 +238,8 @@ class ImageResize
     private function getViewImages(array $themes): array
     {
         $viewImages = [];
-        /** @var \Magento\Theme\Model\Theme $theme */
+        $stores = $this->storeManager->getStores(true);
+        /** @var Theme $theme */
         foreach ($themes as $theme) {
             $config = $this->viewConfig->getViewConfig(
                 [
@@ -236,9 +249,12 @@ class ImageResize
             );
             $images = $config->getMediaEntities('Magento_Catalog', ImageHelper::MEDIA_TYPE_CONFIG_NODE);
             foreach ($images as $imageId => $imageData) {
-                $uniqIndex = $this->getUniqueImageIndex($imageData);
-                $imageData['id'] = $imageId;
-                $viewImages[$uniqIndex] = $imageData;
+                foreach ($stores as $store) {
+                    $data = $this->paramsBuilder->build($imageData, (int) $store->getId());
+                    $uniqIndex = $this->getUniqueImageIndex($data);
+                    $data['id'] = $imageId;
+                    $viewImages[$uniqIndex] = $data;
+                }
             }
         }
         return $viewImages;
@@ -280,13 +296,13 @@ class ImageResize
     /**
      * Resize image.
      *
-     * @param array $viewImage
+     * @param array $imageParams
      * @param string $originalImagePath
      * @param string $originalImageName
      */
-    private function resize(array $viewImage, string $originalImagePath, string $originalImageName)
+    private function resize(array $imageParams, string $originalImagePath, string $originalImageName)
     {
-        $imageParams = $this->paramsBuilder->build($viewImage);
+        unset($imageParams['id']);
         $image = $this->makeImage($originalImagePath, $imageParams);
         $imageAsset = $this->assertImageFactory->create(
             [
@@ -295,6 +311,10 @@ class ImageResize
             ]
         );
 
+        if ($imageParams['image_width'] !== null && $imageParams['image_height'] !== null) {
+            $image->resize($imageParams['image_width'], $imageParams['image_height']);
+        }
+
         if (isset($imageParams['watermark_file'])) {
             if ($imageParams['watermark_height'] !== null) {
                 $image->setWatermarkHeight($imageParams['watermark_height']);
@@ -315,9 +335,6 @@ class ImageResize
             $image->watermark($this->getWatermarkFilePath($imageParams['watermark_file']));
         }
 
-        if ($imageParams['image_width'] !== null && $imageParams['image_height'] !== null) {
-            $image->resize($imageParams['image_width'], $imageParams['image_height']);
-        }
         $image->save($imageAsset->getPath());
 
         if ($this->fileStorageDatabase->checkDbUsage()) {
