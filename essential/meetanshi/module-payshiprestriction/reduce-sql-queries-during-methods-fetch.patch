diff --git a/Helper/Data.php b/Helper/Data.php
index 0d1886a..b22f05f 100644
--- a/Helper/Data.php
+++ b/Helper/Data.php
@@ -20,6 +20,12 @@ use Magento\Store\Model\ScopeInterface;
  */
 class Data extends AbstractHelper
 {
+    // BEGINNING OF PATCH
+    protected $visibleShippingMethods = null;
+
+    protected $visiblePaymentMethods = null;
+    // END OF PATCH
+
     /**
      * @var null
      */
@@ -85,7 +91,7 @@ class Data extends AbstractHelper
         $storeId = $this->storeManager->getWebsite($websiteId)->getDefaultStore()->getId();
         $this->storeManager->setCurrentStore($storeId);
         // END OF PATCH
-        
+
         $collection = $this->collectionFactory->create();
         $collection->addFieldToFilter('type', ['eq' => $type]);
         if ($method !== null) {
@@ -118,7 +124,7 @@ class Data extends AbstractHelper
     {
         return $this->customerGroupCollection->create();
     }
-    
+
     /**
      * @return bool
      */
@@ -127,7 +133,7 @@ class Data extends AbstractHelper
         if (strpos($method, "klarna_pay") !== false) {
             $method = "klarna_kp";
         }
-        
+
         if ($this->isEnabled() == 0) {
             return true;
         }
@@ -139,18 +145,26 @@ class Data extends AbstractHelper
         }
         return true;
     }
-    
+
     /**
      * @return bool
      */
     public function _canUseShippingMethod($method)
     {
-        $websiteId = $this->storeManager->getStore()->getWebsiteId();
-        $type = 'shipping';
-        $flag = false;
-        $collection = $this->getMethodsVisibility($type, $websiteId, $method);
+        // BEGINNING OF PATCH
+//        $websiteId = $this->storeManager->getStore()->getWebsiteId();
+//        $type = 'shipping';
+//        $flag = false;
+//        $collection = $this->getMethodsVisibility($type, $websiteId, $method);
+        $collection = $this->getVisibleShippingMethods();
+        // END OF PATCH
 
         foreach ($collection as $methods) {
+            // BEGINNING OF PATCH
+            if ($methods->getMethod() != $method) {
+                continue;
+            }
+            // END OF PATCH
             if ($methods->getRestrictionId()) {
                 if ($methods->getCustomerGroupIds() != '') {
                     $allowedGroups = explode(',', $methods->getCustomerGroupIds());
@@ -173,19 +187,26 @@ class Data extends AbstractHelper
 
         return false;
     }
-    
+
     /**
      * @return bool
      */
     protected function _canUsePaymentMethod($method)
     {
-        
-        $websiteId = $this->storeManager->getStore()->getWebsiteId();
-        $type = 'payment';
-        $flag = false;
-        $collection = $this->getMethodsVisibility($type, $websiteId, $method);
+        // BEGINNING OF PATCH
+//        $websiteId = $this->storeManager->getStore()->getWebsiteId();
+//        $type = 'payment';
+//        $flag = false;
+//        $collection = $this->getMethodsVisibility($type, $websiteId, $method);
+        $collection = $this->getVisiblePaymentMethods();
+        // END OF PATCH
 
         foreach ($collection as $methods) {
+            // BEGINNING OF PATCH
+            if ($methods->getMethod() != $method) {
+                continue;
+            }
+            // END OF PATCH
             if ($methods->getRestrictionId()) {
                 if ($methods->getCustomerGroupIds() != '') {
                     $allowedGroups = explode(',', $methods->getCustomerGroupIds());
@@ -209,6 +230,31 @@ class Data extends AbstractHelper
         return false;
     }
 
+    // BEGINNING OF PATCH
+    protected function getVisibleShippingMethods()
+    {
+        if (empty($this->visibleShippingMethods)) {
+            $websiteId = $this->storeManager->getStore()->getWebsiteId();
+            $type = 'shipping';
+            $this->visibleShippingMethods = $this->getMethodsVisibility($type, $websiteId);
+        }
+
+        return $this->visibleShippingMethods;
+    }
+
+
+    protected function getVisiblePaymentMethods()
+    {
+        if (empty($this->visiblePaymentMethods)) {
+            $websiteId = $this->storeManager->getStore()->getWebsiteId();
+            $type = 'payment';
+            $this->visiblePaymentMethods = $this->getMethodsVisibility($type, $websiteId);
+        }
+
+        return $this->visiblePaymentMethods;
+    }
+    // END OF PATCH
+
     /**
      * @return int|null
      */
