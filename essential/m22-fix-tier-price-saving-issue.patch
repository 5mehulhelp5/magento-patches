diff --git a/Model/Product/Attribute/Backend/TierPrice/UpdateHandler.php b/Model/Product/Attribute/Backend/TierPrice/UpdateHandler.php
index b23dc6f..cd7650f 100644
--- a/Model/Product/Attribute/Backend/TierPrice/UpdateHandler.php
+++ b/Model/Product/Attribute/Backend/TierPrice/UpdateHandler.php
@@ -82,14 +82,18 @@ class UpdateHandler implements ExtensionInterface
                     __('Tier prices data should be array, but actually other type is received')
                 );
             }
-            $websiteId = $this->storeManager->getStore($entity->getStoreId())->getWebsiteId();
+            $websiteId = (int)$this->storeManager->getStore($entity->getStoreId())->getWebsiteId();
             $isGlobal = $attribute->isScopeGlobal() || $websiteId === 0;
             $identifierField = $this->metadataPoll->getMetadata(ProductInterface::class)->getLinkField();
-            $productId = $entity->getData($identifierField);
+            $productId = (int)$entity->getData($identifierField);
 
             // prepare original data to compare
-            $origPrices = $entity->getOrigData($attribute->getName());
-            $old = $this->prepareOriginalDataToCompare($origPrices, $isGlobal);
+            $origPrices = [];
+            $originalId = $entity->getOrigData($identifierField);
+            if (empty($originalId) || $entity->getData($identifierField) == $originalId) {
+                $origPrices = $entity->getOrigData($attribute->getName());
+            }
+            $old = $this->prepareOldTierPriceToCompare($origPrices);
             // prepare data for save
             $new = $this->prepareNewDataForSave($priceRows, $isGlobal);
 
@@ -261,6 +265,24 @@ class UpdateHandler implements ExtensionInterface
         return $websiteId === 0;
     }
 
+    /**
+     * Prepare old data to compare.
+     *
+     * @param array|null $origPrices
+     * @return array
+     */
+    private function prepareOldTierPriceToCompare($origPrices)
+    {
+        $old = [];
+        if (is_array($origPrices)) {
+            foreach ($origPrices as $data) {
+                $key = $this->getPriceKey($data);
+                $old[$key] = $data;
+            }
+        }
+        return $old;
+    }
+
     /**
      * @param array|null $origPrices
      * @param bool $isGlobal
