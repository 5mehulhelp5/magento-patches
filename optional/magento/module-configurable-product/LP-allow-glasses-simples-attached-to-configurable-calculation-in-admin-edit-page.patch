diff --git a/Ui/DataProvider/Product/Form/Modifier/Data/AssociatedProducts.php b/Ui/DataProvider/Product/Form/Modifier/Data/AssociatedProducts.php
index 7815408..f72aa6c 100644
--- a/Ui/DataProvider/Product/Form/Modifier/Data/AssociatedProducts.php
+++ b/Ui/DataProvider/Product/Form/Modifier/Data/AssociatedProducts.php
@@ -87,6 +87,16 @@ class AssociatedProducts
      */
     protected $imageHelper;

+    /**
+     * @var \Creativestyle\CustomizationLensplazaGlasses\Helper\Glasses
+     */
+    protected $glassesHelper;
+
+    /**
+     * @var \Creativestyle\CustomizationLensplazaSunglasses\Helper\Sunglasses
+     */
+    protected $sunglassesHelper;
+
     /**
      * @var Escaper
      */
@@ -115,6 +125,8 @@ class AssociatedProducts
         CurrencyInterface $localeCurrency,
         JsonHelper $jsonHelper,
         ImageHelper $imageHelper,
+        \Creativestyle\CustomizationLensplazaGlasses\Helper\Glasses $glassesHelper,
+        \Creativestyle\CustomizationLensplazaSunglasses\Helper\Sunglasses $sunglassesHelper,
         Escaper $escaper = null
     ) {
         $this->locator = $locator;
@@ -127,6 +139,8 @@ class AssociatedProducts
         $this->jsonHelper = $jsonHelper;
         $this->imageHelper = $imageHelper;
         $this->escaper = $escaper ?: ObjectManager::getInstance()->get(Escaper::class);
+        $this->glassesHelper = $glassesHelper;
+        $this->sunglassesHelper = $sunglassesHelper;
     }

     /**
@@ -291,27 +305,32 @@ class AssociatedProducts
                         $attributes[$attribute->getAttributeId()]['chosen'][$optionId] = $variationOption;
                     }

-                    $productMatrix[] = [
-                        'id' => $product->getId(),
-                        'product_link' => '<a href="' . $this->urlBuilder->getUrl(
-                            'catalog/product/edit',
-                            ['id' => $product->getId()]
-                        ) . '" target="_blank">' . $this->escaper->escapeHtml($product->getName()) . '</a>',
-                        'sku' => $product->getSku(),
-                        'name' => $this->escaper->escapeHtml($product->getName()),
-                        'qty' => $this->getProductStockQty($product),
-                        'price' => $price,
-                        'price_string' => $currency->toCurrency(sprintf("%f", $price)),
-                        'price_currency' => $this->locator->getStore()->getBaseCurrency()->getCurrencySymbol(),
-                        'configurable_attribute' => $this->getJsonConfigurableAttributes($variationOptions),
-                        'weight' => $product->getWeight(),
-                        'status' => $product->getStatus(),
-                        'variationKey' => $this->getVariationKey($variationOptions),
-                        'canEdit' => 0,
-                        'newProduct' => 0,
-                        'attributes' => $this->getTextAttributes($variationOptions),
-                        'thumbnail_image' => $this->imageHelper->init($product, 'product_thumbnail_image')->getUrl(),
-                    ];
+                    $isGlasses = $this->glassesHelper->isGlassesProduct($product->getId());
+                    $isSunglasses = $this->sunglassesHelper->isSunglassesProduct($product->getId());
+
+                    if ($isGlasses || $isSunglasses) {
+                        $productMatrix[] = [
+                            'id' => $product->getId(),
+                            'product_link' => '<a href="' . $this->urlBuilder->getUrl(
+                                    'catalog/product/edit',
+                                    ['id' => $product->getId()]
+                                ) . '" target="_blank">' . $this->escaper->escapeHtml($product->getName()) . '</a>',
+                            'sku' => $product->getSku(),
+                            'name' => $this->escaper->escapeHtml($product->getName()),
+                            'qty' => $this->getProductStockQty($product),
+                            'price' => $price,
+                            'price_string' => $currency->toCurrency(sprintf("%f", $price)),
+                            'price_currency' => $this->locator->getStore()->getBaseCurrency()->getCurrencySymbol(),
+                            'configurable_attribute' => $this->getJsonConfigurableAttributes($variationOptions),
+                            'weight' => $product->getWeight(),
+                            'status' => $product->getStatus(),
+                            'variationKey' => $this->getVariationKey($variationOptions),
+                            'canEdit' => 0,
+                            'newProduct' => 0,
+                            'attributes' => $this->getTextAttributes($variationOptions),
+                            'thumbnail_image' => $this->imageHelper->init($product, 'product_thumbnail_image')->getUrl(),
+                        ];
+                    }
                     $productIds[] = $product->getId();
                 }
             }
