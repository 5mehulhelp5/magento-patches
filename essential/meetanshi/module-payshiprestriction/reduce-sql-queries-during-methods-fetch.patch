diff --git a/Helper/Data.php b/Helper/Data.php
index 8726ffd..7141dca 100644
--- a/Helper/Data.php
+++ b/Helper/Data.php
@@ -20,6 +20,10 @@ use Magento\Store\Model\ScopeInterface;
  */
 class Data extends AbstractHelper
 {
+    // BEGIN PATCH
+    protected $visibleShippingMethods = null;
+    protected $visiblePaymentMethods = null;
+    // END PATCH
     /**
      * @var null
      */
@@ -81,6 +85,11 @@ class Data extends AbstractHelper
      */
     public function getMethodsVisibility($type, $websiteId, $method = null)
     {
+        // BEGIN PATCH
+        $storeId = $this->storeManager->getWebsite($websiteId)->getDefaultStore()->getId();
+        $this->storeManager->setCurrentStore($storeId);
+        // END PATCH
+
         $collection = $this->collectionFactory->create();
         $collection->addFieldToFilter('type', ['eq' => $type]);
         if ($method !== null) {
@@ -113,7 +122,7 @@ class Data extends AbstractHelper
     {
         return $this->customerGroupCollection->create();
     }
-
+
     /**
      * @return bool
      */
@@ -122,7 +131,6 @@ class Data extends AbstractHelper
         if (strpos($method, "klarna_pay") !== false) {
             $method = "klarna_kp";
         }
-
         if ($this->isEnabled() == 0) {
             return true;
         }
@@ -134,18 +142,26 @@ class Data extends AbstractHelper
         }
         return true;
     }
-
+
     /**
      * @return bool
      */
     public function _canUseShippingMethod($method)
     {
-        $websiteId = $this->storeManager->getStore()->getWebsiteId();
-        $type = 'shipping';
-        $flag = false;
-        $collection = $this->getMethodsVisibility($type, $websiteId, $method);
+        // BEGIN PATCH
+        //$websiteId = $this->storeManager->getStore()->getWebsiteId();
+        //$type = 'shipping';
+        $flag = false;
+        //$collection = $this->getMethodsVisibility($type, $websiteId, $method);
+        $collection = $this->getVisibleShippingMethods();
+        // END PATCH

         foreach ($collection as $methods) {
+            // BEGIN PATCH
+            if ($methods->getMethod() != $method) {
+                continue;
+            }
+            // END PATCH
             if ($methods->getRestrictionId()) {
                 if ($methods->getCustomerGroupIds() != '') {
                     $allowedGroups = explode(',', $methods->getCustomerGroupIds());
@@ -168,19 +184,27 @@ class Data extends AbstractHelper

         return false;
     }
-
+
     /**
      * @return bool
      */
     protected function _canUsePaymentMethod($method)
     {
-
-        $websiteId = $this->storeManager->getStore()->getWebsiteId();
-        $type = 'payment';
-        $flag = false;
-        $collection = $this->getMethodsVisibility($type, $websiteId, $method);
+
+        // BEGIN PATCH
+        //$websiteId = $this->storeManager->getStore()->getWebsiteId();
+        //$type = 'payment';
+        $flag = false;
+        //$collection = $this->getMethodsVisibility($type, $websiteId, $method);
+        $collection = $this->getVisiblePaymentMethods();
+        // END PATCH

         foreach ($collection as $methods) {
+            // BEGIN PATCH
+            if ($methods->getMethod() != $method) {
+                continue;
+            }
+            // END PATCH
             if ($methods->getRestrictionId()) {
                 if ($methods->getCustomerGroupIds() != '') {
                     $allowedGroups = explode(',', $methods->getCustomerGroupIds());
@@ -231,4 +255,28 @@ class Data extends AbstractHelper
     {
         return $this->scopeConfig->getValue('psrestrict/general/enabled', ScopeInterface::SCOPE_STORE);
     }
+
+    // BEGINNING OF PATCH
+    protected function getVisibleShippingMethods()
+    {
+        if ($this->visibleShippingMethods == null) {
+            $websiteId = $this->storeManager->getStore()->getWebsiteId();
+            $type = 'shipping';
+            $this->visibleShippingMethods = $this->getMethodsVisibility($type, $websiteId);
+        }
+
+        return $this->visibleShippingMethods;
+    }
+
+    protected function getVisiblePaymentMethods()
+    {
+        if ($this->visiblePaymentMethods == null) {
+            $websiteId = $this->storeManager->getStore()->getWebsiteId();
+            $type = 'payment';
+            $this->visiblePaymentMethods = $this->getMethodsVisibility($type, $websiteId);
+        }
+
+        return $this->visiblePaymentMethods;
+    }
+    // END OF PATCH
 }
