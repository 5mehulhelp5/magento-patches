diff --git a/view/frontend/templates/js/customer-data.phtml b/view/frontend/templates/js/customer-data.phtml
index 0373b7b..9d46f0c 100644
--- a/view/frontend/templates/js/customer-data.phtml
+++ b/view/frontend/templates/js/customer-data.phtml
@@ -6,15 +6,15 @@
 
 /** @var \Magento\Customer\Block\CustomerData $block */
 ?>
-<script type="text/x-magento-init">
-<?= /* @noEscape */ $this->helper(\Magento\Framework\Json\Helper\Data::class)->jsonEncode([
-        '*' => ['Magento_Customer/js/customer-data' => [
-            'sectionLoadUrl' => $block->getCustomerDataUrl('customer/section/load'),
-            'expirableSectionLifetime' => $block->getExpirableSectionLifetime(),
-            'expirableSectionNames' => $block->getExpirableSectionNames(),
-            'cookieLifeTime' => $block->getCookieLifeTime(),
-            'updateSessionUrl' => $block->getCustomerDataUrl('customer/account/updateSession'),
-        ]],
-    ]);
-?>
+<script>
+    requirejs.config({
+        config: <?= /* @noEscape */ $this->helper(\Magento\Framework\Json\Helper\Data::class)->jsonEncode(['Magento_Customer/js/customer-data' => [
+                    'sectionLoadUrl' => $block->getCustomerDataUrl('customer/section/load'),
+                    'expirableSectionLifetime' => $block->getExpirableSectionLifetime(),
+                    'expirableSectionNames' => $block->getExpirableSectionNames(),
+                    'cookieLifeTime' => $block->getCookieLifeTime(),
+                    'updateSessionUrl' => $block->getCustomerDataUrl('customer/account/updateSession'),
+                ]]); ?>
+
+    });
 </script>
diff --git a/view/frontend/templates/js/section-config.phtml b/view/frontend/templates/js/section-config.phtml
index 94ab475..bb0b51f 100644
--- a/view/frontend/templates/js/section-config.phtml
+++ b/view/frontend/templates/js/section-config.phtml
@@ -6,16 +6,18 @@
 
 /** @var \Magento\Customer\Block\SectionConfig $block */
 ?>
-<script type="text/x-magento-init">
-<?= /* @noEscape */ $this->helper(\Magento\Framework\Json\Helper\Data::class)->jsonEncode([
-        '*' => ['Magento_Customer/js/section-config' => [
-            'sections' => $block->getSections(),
-            'clientSideSections' => $block->getClientSideSections(),
-            'baseUrls' => array_unique([
-                $block->getUrl(null, ['_secure' => true]),
-                $block->getUrl(null, ['_secure' => false]),
-            ]),
-        ]],
-    ]);
-?>
+<script>
+    requirejs.config({
+        config: <?= /* @noEscape */ $this->helper(\Magento\Framework\Json\Helper\Data::class)->jsonEncode([
+                    'Magento_Customer/js/section-config' => [
+                        'sections' => $block->getSections(),
+                        'clientSideSections' => $block->getClientSideSections(),
+                        'baseUrls' => array_unique([
+                            $block->getUrl(null, ['_secure' => true]),
+                            $block->getUrl(null, ['_secure' => false]),
+                        ])
+                    ]
+                ]); ?>
+    });
 </script>
diff --git a/view/frontend/web/js/customer-data.js b/view/frontend/web/js/customer-data.js
index f6774c3..cc56bb3 100644
--- a/view/frontend/web/js/customer-data.js
+++ b/view/frontend/web/js/customer-data.js
@@ -11,13 +11,13 @@ define([
     'underscore',
     'ko',
     'Magento_Customer/js/section-config',
-    'mage/url',
+    'module',
     'mage/storage',
     'jquery/jquery-storageapi'
-], function ($, _, ko, sectionConfig, url) {
+], function ($, _, ko, sectionConfig, module) {
     'use strict';
 
-    var options = {},
+    var options = module.config(),
         storage,
         storageInvalidation,
         invalidateCacheBySessionTimeOut,
@@ -26,9 +26,6 @@ define([
         buffer,
         customerData;
 
-    url.setBaseUrl(window.BASE_URL);
-    options.sectionLoadUrl = url.build('customer/section/load');
-
     //TODO: remove global change, in this case made for initNamespaceStorage
     $.cookieStorage.setConf({
         path: '/',
@@ -198,34 +195,9 @@ define([
          * Customer data initialization
          */
         init: function () {
-            var countryData,
-                privateContentVersion = 'private_content_version',
-                privateContent = $.cookieStorage.get(privateContentVersion),
-                localPrivateContent = $.localStorage.get(privateContentVersion),
-                needVersion = 'need_version',
-                expiredSectionNames = this.getExpiredSectionNames(),
-                isLoading = false;
-
-            if (privateContent &&
-                !$.cookieStorage.isSet(privateContentVersion) &&
-                !$.localStorage.isSet(privateContentVersion)
-            ) {
-                $.cookieStorage.set(privateContentVersion, needVersion);
-                $.localStorage.set(privateContentVersion, needVersion);
-                this.reload([], false);
-                isLoading = true;
-            } else if (localPrivateContent !== privateContent) {
-                if (!$.cookieStorage.isSet(privateContentVersion)) {
-                    privateContent = needVersion;
-                    $.cookieStorage.set(privateContentVersion, privateContent);
-                }
-                $.localStorage.set(privateContentVersion, privateContent);
-                _.each(dataProvider.getFromStorage(storage.keys()), function (sectionData, sectionName) {
-                    buffer.notify(sectionName, sectionData);
-                });
-                this.reload([], false);
-                isLoading = true;
-            } else if (expiredSectionNames.length > 0) {
+            var expiredSectionNames = this.getExpiredSectionNames();
+
+            if (expiredSectionNames.length > 0) {
                 _.each(dataProvider.getFromStorage(storage.keys()), function (sectionData, sectionName) {
                     buffer.notify(sectionName, sectionData);
                 });
@@ -239,14 +211,6 @@ define([
                     this.reload(storageInvalidation.keys(), false);
                 }
             }
-
-            if (!_.isEmpty(privateContent)) {
-                countryData = this.get('directory-data');
-
-                if (_.isEmpty(countryData()) && !isLoading) {
-                    customerData.reload(['directory-data'], false);
-                }
-            }
         },
 
         /**
@@ -332,6 +296,9 @@ define([
         },
 
         /**
+         * Avoid using this function directly 'cause of possible performance drawbacks.
+         * Each customer section reload brings new non-cached ajax request.
+         *
          * @param {Array} sectionNames
          * @param {Boolean} forceNewSectionTimestamp
          * @return {*}
@@ -350,7 +317,9 @@ define([
             var sectionDataIds,
                 sectionsNamesForInvalidation;
 
-            sectionsNamesForInvalidation = _.contains(sectionNames, '*') ? buffer.keys() : sectionNames;
+            sectionsNamesForInvalidation = _.contains(sectionNames, '*') ? sectionConfig.getSectionNames() :
+                sectionNames;
+
             $(document).trigger('customer-data-invalidate', [sectionsNamesForInvalidation]);
             buffer.remove(sectionsNamesForInvalidation);
             sectionDataIds = $.cookieStorage.get('section_data_ids') || {};
@@ -365,17 +334,15 @@ define([
         },
 
         /**
-         * @param {Object} settings
          * @constructor
          */
-        'Magento_Customer/js/customer-data': function (settings) {
-            options = settings;
-            invalidateCacheBySessionTimeOut(settings);
-            invalidateCacheByCloseCookieSession();
-            customerData.init();
-        }
+        'Magento_Customer/js/customer-data': function () {}
     };
 
+    invalidateCacheBySessionTimeOut(options);
+    invalidateCacheByCloseCookieSession();
+    customerData.init();
+
     /**
      * Events listener
      */
diff --git a/view/frontend/web/js/section-config.js b/view/frontend/web/js/section-config.js
index 76fe7f2..18fd4ff 100644
--- a/view/frontend/web/js/section-config.js
+++ b/view/frontend/web/js/section-config.js
@@ -3,10 +3,15 @@
  * See COPYING.txt for license details.
  */
 
-define(['underscore'], function (_) {
+define(['underscore', 'module'], function (_, module) {
     'use strict';
 
-    var baseUrls, sections, clientSideSections, canonize;
+    var options = module.config(),
+        baseUrls = options.baseUrls,
+        sections = options.sections,
+        clientSideSections = options.clientSideSections,
+        sectionNames = options.sectionNames,
+        canonize;
 
     /**
      * @param {String} url
@@ -71,13 +76,17 @@ define(['underscore'], function (_) {
         },
 
         /**
-         * @param {Object} options
+         * Returns array of section names.
+         *
+         * @returns {Array}
+         */
+        getSectionNames: function () {
+            return sectionNames;
+        },
+
+        /**
          * @constructor
          */
-        'Magento_Customer/js/section-config': function (options) {
-            baseUrls = options.baseUrls;
-            sections = options.sections;
-            clientSideSections = options.clientSideSections;
-        }
+        'Magento_Customer/js/section-config': function () {}
     };
 });
