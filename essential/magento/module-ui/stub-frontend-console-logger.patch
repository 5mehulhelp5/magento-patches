diff --git a/view/base/web/js/lib/logger/console-logger.js b/view/base/web/js/lib/logger/console-logger.js
index 0d0f9ce..6f58640 100644
--- a/view/base/web/js/lib/logger/console-logger.js
+++ b/view/base/web/js/lib/logger/console-logger.js
@@ -3,78 +3,15 @@
  * See COPYING.txt for license details.
  */
 
-define([
-    './logger',
-    './entry-factory',
-    './console-output-handler',
-    './formatter',
-    './message-pool',
-    './levels-pool',
-    'Magento_Ui/js/lib/core/storage/local',
-    'underscore',
-    './logger-utils'
-], function (Logger, entryFactory, ConsoleHandler, Formatter, messagePoll, levelsPoll, storage, _, LoggerUtils) {
+define([], function () {
     'use strict';
-
-    var STORAGE_NAMESPACE = 'CONSOLE_LOGGER';
-
-    /**
-     * Singleton Logger's sub-class instance of which is configured to display its
-     * messages to the console. It also provides the support of predefined messages
-     * and persists its display level.
-     */
-    function ConsoleLogger() {
-        var formatter = new Formatter(),
-            consoleHandler = new ConsoleHandler(formatter),
-            savedLevel = storage.get(STORAGE_NAMESPACE),
-            utils = new LoggerUtils(this);
-
-        Logger.call(this, consoleHandler, entryFactory);
-
-        if (savedLevel) {
-            this.displayLevel_ = savedLevel;
-        }
-
-        this.utils = utils;
-        this.messages = messagePoll;
-        this.levels = levelsPoll.getLevels();
-    }
-
-    _.extend(ConsoleLogger, Logger);
-
-    ConsoleLogger.prototype = Object.create(Logger.prototype);
-    ConsoleLogger.prototype.constructor = ConsoleLogger;
-
-    /**
-     * Overrides parent method to save the provided display level.
-     *
-     * @override
-     */
-    ConsoleLogger.prototype.setDisplayLevel = function (level) {
-        Logger.prototype.setDisplayLevel.call(this, level);
-
-        storage.set(STORAGE_NAMESPACE, level);
-    };
-
-    /**
-     * Adds the support of predefined messages.
-     *
-     * @protected
-     * @override
-     */
-    ConsoleLogger.prototype.createEntry_ = function (message, level, data) {
-        var code;
-
-        if (messagePoll.hasMessage(message)) {
-            data = data || {};
-            code = message;
-            message = messagePoll.getMessage(code);
-
-            data.messageCode = code;
-        }
-
-        return Logger.prototype.createEntry_.call(this, message, level, data);
+    // By default, the logger is only reporting errors.
+    var logger = {
+        utils: {},
+        error: console.error // Maintain the logging of errors.
     };
+    // Safely stub everything else that is used but is set to not log anything anyway.
+    logger.info = logger.log = logger.warn = logger.utils.asyncLog = logger.utils.createMessages = function (){};
 
-    return new ConsoleLogger();
+    return logger;
 });
