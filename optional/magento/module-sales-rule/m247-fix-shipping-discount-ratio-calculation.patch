diff --git a/Helper/CartFixedDiscount.php b/Helper/CartFixedDiscount.php
index a518a00..1bd736a 100644
--- a/Helper/CartFixedDiscount.php
+++ b/Helper/CartFixedDiscount.php
@@ -41,6 +41,13 @@ class CartFixedDiscount
      */
     private $scopeConfig = null;
 
+    // BEGIN PATCH
+    /**
+     * @var \Magento\Tax\Model\Config
+     */
+    protected $taxConfig;
+    // END PATCH
+
     /**
      * @param DeltaPriceRound $deltaPriceRound
      * @param PriceCurrencyInterface $priceCurrency
@@ -57,6 +64,10 @@ class CartFixedDiscount
         $this->priceCurrency = $priceCurrency;
         $this->shippingMethodConverter = $shippingMethodConverter;
         $this->scopeConfig = $scopeConfig;
+
+        // BEGIN PATCH
+        $this->taxConfig = \Magento\Framework\App\ObjectManager::getInstance()->get(\Magento\Tax\Model\Config::class);
+        // END PATCH
     }
 
     /**
@@ -70,6 +81,12 @@ class CartFixedDiscount
         AddressInterface $address,
         float $shippingAmount
     ): float {
+        // BEGIN PATCH
+        // return shipping amount with or without tax, depending on tax configuration
+
+        $shippingAmount = $this->taxConfig->shippingPriceIncludesTax($address->getQuote()->getStoreId()) ? (float) $address->getShippingInclTax() : (float) $address->getShippingAmount();
+        // END PATCH
+
         if ($shippingAmount == 0.0) {
             $addressQty = $this->getAddressQty($address);
             $address->setItemQty($addressQty);
diff --git a/Model/Validator.php b/Model/Validator.php
index c273c80..adb0f05 100644
--- a/Model/Validator.php
+++ b/Model/Validator.php
@@ -124,6 +124,23 @@ class Validator extends \Magento\Framework\Model\AbstractModel implements ResetA
      */
     private $storeManager;
 
+    // BEGIN PATCH
+    /**
+     * @var \Magento\Tax\Model\Config
+     */
+    protected $taxConfig;
+
+    /**
+     * @var \Creativestyle\CustomizationIpetCatalog\Helper\Configuration
+     */
+    protected $ipetCatalogConfiguration;
+
+    /**
+     * @var \Creativestyle\CustomizationIpetCatalog\Model\Product\PriceRound
+     */
+    protected $priceRound;
+    // END PATCH
+
     /**
      * @param \Magento\Framework\Model\Context $context
      * @param \Magento\Framework\Registry $registry
@@ -173,6 +190,12 @@ class Validator extends \Magento\Framework\Model\AbstractModel implements ResetA
         $this->validateCouponCode = $validateCouponCode ?:
             ObjectManager::getInstance()->get(ValidateCouponCode::class);
         parent::__construct($context, $registry, $resource, $resourceCollection, $data);
+
+        // BEGIN PATCH
+        $this->taxConfig = $taxConfig ?? \Magento\Framework\App\ObjectManager::getInstance()->get(\Magento\Tax\Model\Config::class);
+        $this->ipetCatalogConfiguration = \Magento\Framework\App\ObjectManager::getInstance()->get(\Creativestyle\CustomizationIpetCatalog\Helper\Configuration::class);
+        $this->priceRound = \Magento\Framework\App\ObjectManager::getInstance()->get(\Creativestyle\CustomizationIpetCatalog\Model\Product\PriceRound::class);
+        // END PATCH
     }
 
     /**
@@ -454,6 +477,14 @@ class Validator extends \Magento\Framework\Model\AbstractModel implements ResetA
                     $discountAmount = ($shippingAmount - $address->getShippingDiscountAmount()) * $rulePercent / 100;
                     $baseDiscountAmount = ($baseShippingAmount -
                             $address->getBaseShippingDiscountAmount()) * $rulePercent / 100;
+
+                    // BEGIN PATCH
+                    if ($this->ipetCatalogConfiguration->roundPriceToNearestFiveCents()) {
+                        $discountAmount = $this->priceRound->roundDown($discountAmount);
+                        $baseDiscountAmount = $this->priceRound->roundDown($baseDiscountAmount);
+                    }
+                    // END PATCH
+
                     $discountPercent = min(100, $address->getShippingDiscountPercent() + $rulePercent);
                     $address->setShippingDiscountPercent($discountPercent);
                     break;
@@ -475,8 +506,18 @@ class Validator extends \Magento\Framework\Model\AbstractModel implements ResetA
                         $cartRules[$rule->getId()] = $rule->getDiscountAmount();
                     }
                     if ($cartRules[$rule->getId()] > 0) {
-                        $shippingQuoteAmount = (float) $address->getShippingAmount();
-                        $quoteBaseSubtotal = (float) $quote->getBaseSubtotal();
+                        // BEGIN PATCH
+                        // return shipping amount and quote base subtotal with or without tax, depending on tax configuration
+
+                        // $shippingQuoteAmount = $address->getShippingAmount()
+                        // $quoteBaseSubtotal = (float) $quote->getBaseSubtotal();
+
+                        $shippingPriceIncludesTax = $this->taxConfig->shippingPriceIncludesTax($quote->getStoreId());
+
+                        $shippingQuoteAmount = $shippingPriceIncludesTax ? (float) $address->getShippingAmountForDiscount() : (float) $address->getShippingAmount();
+                        $quoteBaseSubtotal = $shippingPriceIncludesTax ? (float) $quote->getTotals()['subtotal']->getValue() : (float) $quote->getBaseSubtotal();
+                        // END PATCH
+
                         $isMultiShipping = $this->cartFixedDiscountHelper->checkMultiShippingQuote($quote);
                         if ($isAppliedToShipping) {
                             $quoteBaseSubtotal = ($quote->getIsMultiShipping() && $isMultiShipping) ?
