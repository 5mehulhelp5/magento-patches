diff --git a/Model/ResourceModel/Indexer/Stock/DefaultStock.php b/Model/ResourceModel/Indexer/Stock/DefaultStock.php
index c151e58..f6d2d28 100644
--- a/Model/ResourceModel/Indexer/Stock/DefaultStock.php
+++ b/Model/ResourceModel/Indexer/Stock/DefaultStock.php
@@ -292,30 +292,41 @@ class DefaultStock extends AbstractIndexer implements StockInterface
      */
     protected function _updateIndex($entityIds)
     {
-        $this->deleteOldRecords($entityIds);
         $connection = $this->getConnection();
-        $select = $this->_getStockStatusSelect($entityIds, true);
-        $select = $this->getQueryProcessorComposite()->processQuery($select, $entityIds, true);
-        $query = $connection->query($select);
-
-        $i = 0;
-        $data = [];
-        while ($row = $query->fetch(\PDO::FETCH_ASSOC)) {
-            $i++;
-            $data[] = [
-                'product_id' => (int)$row['entity_id'],
-                'website_id' => (int)$row['website_id'],
-                'stock_id' => Stock::DEFAULT_STOCK_ID,
-                'qty' => (double)$row['qty'],
-                'stock_status' => (int)$row['status'],
-            ];
-            if ($i % 1000 == 0) {
-                $this->_updateIndexTable($data);
-                $data = [];
+
+        try {
+            $connection->beginTransaction();
+
+            $this->deleteOldRecords($entityIds);
+            $select = $this->_getStockStatusSelect($entityIds, true);
+            $select = $this->getQueryProcessorComposite()->processQuery($select, $entityIds, true);
+            $query = $connection->query($select);
+
+            $i = 0;
+            $data = [];
+            while ($row = $query->fetch(\PDO::FETCH_ASSOC)) {
+                $i++;
+                $data[] = [
+                    'product_id' => (int)$row['entity_id'],
+                    'website_id' => (int)$row['website_id'],
+                    'stock_id' => Stock::DEFAULT_STOCK_ID,
+                    'qty' => (double)$row['qty'],
+                    'stock_status' => (int)$row['status'],
+                ];
+                if ($i % 1000 == 0) {
+                    $this->_updateIndexTable($data);
+                    $data = [];
+                }
             }
-        }
 
-        $this->_updateIndexTable($data);
+            $this->_updateIndexTable($data);
+
+            $connection->commit();
+        }
+        catch (\Exception $e) {
+            $connection->rollBack();
+            throw $e;
+        }
 
         return $this;
     }
