diff --git a/Helper/AttributesCategories.php b/Helper/AttributesCategories.php
index 0fdbdbf..80cf3df 100644
--- a/Helper/AttributesCategories.php
+++ b/Helper/AttributesCategories.php
@@ -80,7 +80,10 @@ class AttributesCategories extends \Magento\Framework\App\Helper\AbstractHelper
         $path = 0;
         $categoriesList = [];

-        foreach (explode(',', (string)$item->getCategoriesIds()) as $key => $category) {
+        //BEGIN PATCH
+        $itemCategories = $this->getItemCategories($item);
+        foreach (explode(',', (string)$itemCategories) as $key => $category) {
+        //END PATCH
             $isInCategoryFilter = $model->params['category_filter'] && isset($model->categories[$category]) && isset($model->categories[$category]['path']);
             $isOutCategoryFilter = !$model->params['category_filter'] && isset($model->categories[$category]) && isset($model->categories[$category]['path']);

@@ -146,6 +149,47 @@ class AttributesCategories extends \Magento\Framework\App\Helper\AbstractHelper
         return implode($separator, array_slice($category, $from, $length));
     }

+    //BEGIN PATCH
+    protected static array $virtualCategoriesIds = [];
+
+    protected function getItemCategories($item)
+    {
+        if ($item instanceof \Magento\Catalog\Model\Product) {
+            $virtualCategoriesIds = $this->getVirtualCategoriesIds();
+            $productCategoriesIds = explode(',', $item->getCategoriesIds() ?: '');
+
+            return implode(',', array_diff($productCategoriesIds, $virtualCategoriesIds));
+        }
+
+        return $item->getCategoriesIds();
+    }
+
+    protected function getVirtualCategoriesIds(): array
+    {
+        if (!empty(self::$virtualCategoriesIds)) {
+            return self::$virtualCategoriesIds;
+        }
+
+        $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
+
+        $eavConfig = $objectManager->get(\Magento\Eav\Model\Config::class);
+        $attribute = $eavConfig->getAttribute(\Magento\Catalog\Model\Category::ENTITY, 'is_virtual_category');
+
+        /** @var \Magento\Framework\App\ResourceConnection $resourceConnection */
+        $resourceConnection = $objectManager->get(\Magento\Framework\App\ResourceConnection::class);
+        $connection = $resourceConnection->getConnection();
+        $tableName = $connection->getTableName('catalog_category_entity_int');
+        $select = $connection->select()
+            ->from($tableName, ['entity_id'])
+            ->where('attribute_id = ?', $attribute->getAttributeId())
+            ->where('value = 1');
+        $categoriesIds = $connection->fetchAssoc($select);
+
+        self::$virtualCategoriesIds = array_keys($categoriesIds);
+        return self::$virtualCategoriesIds;
+    }
+    //END PATCH
+
     /**
      * {category_mapping} attribute processing
      * @param \Wyomind\DataFeedManager\Model\Feeds $model

diff --git a/Model/ResourceModel/Product/Collection.php b/Model/ResourceModel/Product/Collection.php
index 7c86d39..afc8207 100644
--- a/Model/ResourceModel/Product/Collection.php
+++ b/Model/ResourceModel/Product/Collection.php
@@ -390,10 +390,14 @@ class Collection extends \Magento\Catalog\Model\ResourceModel\Product\Collection
             //BEGIN PATCH
             $in = $params['category_filter'] ? 'IN' : 'NOT IN';
             $where .= empty($where) ? '' : ' AND';
-            $where .= " e.entity_id ". $in ." (SELECT product_id FROM catalog_category_product WHERE category_id IN (" . $filter . ")) ";
+            $where .= " e.entity_id ". $in ." (SELECT product_id FROM catalog_category_product WHERE category_id IN (" . $filter . ")) ";
+
+
+            $this->getSelect()->joinLeft(['categories_1' => $tableCcpi], 'categories_1.product_id = e.entity_id', ["category_id", "categories_ids" => "GROUP_CONCAT( DISTINCT categories_1.category_id)"]);
+            $this->getSelect()->joinLeft(['categories_2' => $tableCcpi], 'categories_2.product_id = cpslcpe.entity_id', ["category_id", "categories_ids" => "GROUP_CONCAT( DISTINCT categories_1.category_id)"]);
+            $this->getSelect()->joinLeft(['cce_1' => $tableCce], 'categories_1.category_id = cce_1.entity_id AND cce_1.path LIKE \''. $categoryRootId . '/' . $storeRootId . '/%\'', ['parent_id', 'created_at', 'updated_at', 'path', 'position', 'level','children_count']);
+            $this->getSelect()->joinLeft(['cce_2' => $tableCce], 'categories_2.category_id = cce_2.entity_id AND cce_2.path LIKE \''. $categoryRootId . '/' . $storeRootId . '/%\'', ['parent_id', 'created_at', 'updated_at', 'path', 'position', 'level','children_count']);
             //END PATCH
-            $this->getSelect()->joinInner(['categories' => $tableCcpi], $ct, ["categories_ids" => "GROUP_CONCAT( DISTINCT categories.category_id)"]);
-            $this->getSelect()->joinInner(['cce' => $tableCce], "categories.category_id=cce.entity_id AND cce.path LIKE '" . $categoryRootId . "/" . $storeRootId . "/%'", []);
         } else {
             $this->getSelect()->joinLeft(['categories' => $tableCcpi], "categories.product_id=e.entity_id", ["categories_ids" => "GROUP_CONCAT( DISTINCT categories.category_id)"]);
             $this->getSelect()->joinLeft(['cce' => $tableCce], "categories.category_id=cce.entity_id AND cce.path LIKE '" . $categoryRootId . "/" . $storeRootId . "/%'", []);
