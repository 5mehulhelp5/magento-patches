diff --git a/Plugin/InventoryIndexer/Plugin/InventoryApi/ReindexAfterSourceItemsSavePlugin/AddBackInStockItemsToQueue.php b/Plugin/InventoryIndexer/Plugin/InventoryApi/ReindexAfterSourceItemsSavePlugin/AddBackInStockItemsToQueue.php
index f3f7241..a53b56e 100644
--- a/Plugin/InventoryIndexer/Plugin/InventoryApi/ReindexAfterSourceItemsSavePlugin/AddBackInStockItemsToQueue.php
+++ b/Plugin/InventoryIndexer/Plugin/InventoryApi/ReindexAfterSourceItemsSavePlugin/AddBackInStockItemsToQueue.php
@@ -12,23 +12,51 @@ class AddBackInStockItemsToQueue
     protected $configuration;

     /**
-     * @var \MageSuite\Queue\Service\Publisher
+     * @var \MageSuite\BackInStock\Model\Data\SourceItemsToQueueContainer
      */
-    protected $queuePublisher;
+    protected $sourceItemsToQueueContainer;
+
+    protected \MageSuite\Queue\Api\ContainerInterface $container;
+    protected \Magento\Framework\Serialize\SerializerInterface $serializer;

     /**
-     * @var \MageSuite\BackInStock\Model\Data\SourceItemsToQueueContainer
+     * @var \Magento\Framework\MessageQueue\ExchangeRepository
      */
-    protected $sourceItemsToQueueContainer;
+    protected $exchangeRepository;
+
+    /**
+     * @var \Magento\Framework\MessageQueue\EnvelopeFactory
+     */
+    protected $envelopeFactory;
+
+    /**
+     * @var \Magento\Framework\MessageQueue\MessageEncoder
+     */
+    protected $messageEncoder;
+
+    /**
+     * @var \Magento\Framework\MessageQueue\MessageValidator
+     */
+    protected $messageValidator;

     public function __construct(
         \MageSuite\BackInStock\Helper\Configuration $configuration,
-        \MageSuite\Queue\Service\Publisher $queuePublisher,
-        \MageSuite\BackInStock\Model\Data\SourceItemsToQueueContainer $sourceItemsToQueueContainer
+        \MageSuite\BackInStock\Model\Data\SourceItemsToQueueContainer $sourceItemsToQueueContainer,
+        \MageSuite\Queue\Api\ContainerInterface $container,
+        \Magento\Framework\Serialize\SerializerInterface $serializer,
+        \Magento\Framework\MessageQueue\ExchangeRepository $exchangeRepository,
+        \Magento\Framework\MessageQueue\EnvelopeFactory $envelopeFactory,
+        \Magento\Framework\MessageQueue\MessageEncoder $messageEncoder,
+        \Magento\Framework\MessageQueue\MessageValidator $messageValidator
     ) {
         $this->configuration = $configuration;
-        $this->queuePublisher = $queuePublisher;
         $this->sourceItemsToQueueContainer = $sourceItemsToQueueContainer;
+        $this->container = $container;
+        $this->serializer = $serializer;
+        $this->exchangeRepository = $exchangeRepository;
+        $this->envelopeFactory = $envelopeFactory;
+        $this->messageEncoder = $messageEncoder;
+        $this->messageValidator = $messageValidator;
     }

     public function afterAfterExecute(\Magento\InventoryIndexer\Plugin\InventoryApi\ReindexAfterSourceItemsSavePlugin $subject, $result)
@@ -43,9 +71,35 @@ class AddBackInStockItemsToQueue
             return $result;
         }

-        $this->queuePublisher->publish($this->handlerClass, $backInStockItems);
+        $data = $this->serializer->serialize($backInStockItems);
+
+        $this->container
+            ->setHandler($this->handlerClass)
+            ->setData($data);
+
+        $this->publish('magesuite.consumer', $this->container);
         $this->sourceItemsToQueueContainer->clearItems();

         return $result;
     }
+
+    protected function publish($topicName, $data)
+    {
+        $this->messageValidator->validate($topicName, $data);
+        $data = $this->messageEncoder->encode($topicName, $data);
+        $envelope = $this->envelopeFactory->create(
+            [
+                'body' => $data,
+                'properties' => [
+                    'delivery_mode' => 2,
+                    // md5() here is not for cryptographic use.
+                    // phpcs:ignore Magento2.Security.InsecureFunction
+                    'message_id' => md5(gethostname() . microtime(true) . uniqid($topicName, true))
+                ]
+            ]
+        );
+
+        $exchange = $this->exchangeRepository->getByConnectionName('db');
+        $exchange->enqueue($topicName, $envelope);
+    }
 }
