diff --git a/DB/Adapter/SqlVersionProvider.php b/DB/Adapter/SqlVersionProvider.php
index def51db..a208f2c 100644
--- a/DB/Adapter/SqlVersionProvider.php
+++ b/DB/Adapter/SqlVersionProvider.php
@@ -25,6 +25,12 @@ class SqlVersionProvider
 
     public const MARIA_DB_10_VERSION = '10.';
 
+    public const MARIA_DB_10_4_VERSION = '10.4.';
+
+    public const MARIA_DB_10_6_VERSION = '10.6.';
+
+    public const MYSQL_8_0_29_VERSION = '8.0.29';
+
     /**#@-*/
 
     /**
@@ -116,4 +122,21 @@ class SqlVersionProvider
 
         return $versionOutput[self::VERSION_VAR_NAME];
     }
+
+    /**
+     * Check if MySQL version is greater than equal to 8.0.29
+     *
+     * @return bool
+     * @throws ConnectionException
+     */
+    public function isMysqlGte8029()
+    {
+        $sqlVersion = $this->getSqlVersion();
+        $isMariaDB = str_contains($sqlVersion, SqlVersionProvider::MARIA_DB_10_VERSION);
+        $sqlExactVersion = $this->fetchSqlVersion(ResourceConnection::DEFAULT_CONNECTION);
+        if (!$isMariaDB && version_compare($sqlExactVersion, '8.0.29', '>=')) {
+            return true;
+        }
+        return false;
+    }
 }
diff --git a/Setup/Declaration/Schema/Dto/Factories/Table.php b/Setup/Declaration/Schema/Dto/Factories/Table.php
index aca7171..ef5b877 100644
--- a/Setup/Declaration/Schema/Dto/Factories/Table.php
+++ b/Setup/Declaration/Schema/Dto/Factories/Table.php
@@ -7,6 +7,7 @@
 namespace Magento\Framework\Setup\Declaration\Schema\Dto\Factories;
 
 use Magento\Framework\App\ResourceConnection;
+use Magento\Framework\DB\Adapter\SqlVersionProvider;
 use Magento\Framework\ObjectManagerInterface;
 
 /**
@@ -21,29 +22,47 @@ class Table implements FactoryInterface
     public const DEFAULT_ENGINE = 'innodb';
 
     /**
-     * Default charset for SQL
+     * @var ObjectManagerInterface
      */
-    public const DEFAULT_CHARSET = 'utf8';
+    private ObjectManagerInterface $objectManager;
 
     /**
-     * Default collation
+     * @var string
      */
-    public const DEFAULT_COLLATION = 'utf8_general_ci';
+    private string $className;
 
     /**
-     * @var ObjectManagerInterface
+     * @var ResourceConnection
      */
-    private $objectManager;
+    private ResourceConnection $resourceConnection;
+
+    /** @var SqlVersionProvider|null */
+    private ?SqlVersionProvider $sqlVersionProvider = null;
 
     /**
-     * @var string
+     * @var string|null
      */
-    private $className;
+    private ?string $sqlVersion = null;
 
     /**
-     * @var ResourceConnection
+     * @var array|string[]
      */
-    private $resourceConnection;
+    private static array $defaultCharset = [
+        '10.4.' => 'utf8',
+        '10.6.' => 'utf8mb3',
+        'mysql_8_29' => 'utf8mb3',
+        'default' => 'utf8'
+    ];
+
+    /**
+     * @var array|string[]
+     */
+    private static array $defaultCollation = [
+        '10.4.' => 'utf8_general_ci',
+        '10.6.' => 'utf8mb3_general_ci',
+        'mysql_8_29' => 'utf8mb3_general_ci',
+        'default' => 'utf8_general_ci'
+    ];
 
     /**
      * Constructor.
@@ -51,15 +70,18 @@ class Table implements FactoryInterface
      * @param ObjectManagerInterface $objectManager
      * @param ResourceConnection $resourceConnection
      * @param string $className
+     * @param SqlVersionProvider|null $sqlVersionProvider
      */
     public function __construct(
         ObjectManagerInterface $objectManager,
         ResourceConnection $resourceConnection,
-        $className = \Magento\Framework\Setup\Declaration\Schema\Dto\Table::class
+        string $className = \Magento\Framework\Setup\Declaration\Schema\Dto\Table::class,
+        ?SqlVersionProvider $sqlVersionProvider = null
     ) {
         $this->objectManager = $objectManager;
         $this->className = $className;
         $this->resourceConnection = $resourceConnection;
+        $this->sqlVersionProvider = $sqlVersionProvider ?? $this->objectManager->get(SqlVersionProvider::class);
     }
 
     /**
@@ -72,11 +94,11 @@ class Table implements FactoryInterface
         }
         //Prepare charset
         if (!isset($data['charset'])) {
-            $data['charset'] = self::DEFAULT_CHARSET;
+            $data['charset'] = $this->getDefaultCharset();
         }
         //Prepare collation
         if (!isset($data['collation'])) {
-            $data['collation'] = self::DEFAULT_COLLATION;
+            $data['collation'] = $this->getDefaultCollation();
         }
         //Prepare triggers
         if (!isset($data['onCreate'])) {
@@ -94,4 +116,48 @@ class Table implements FactoryInterface
 
         return $this->objectManager->create($this->className, $data);
     }
+
+    /**
+     * Get default charset based on sql version
+     *
+     * @return string
+     */
+    private function getDefaultCharset(): string
+    {
+        if ($this->sqlVersionProvider->isMysqlGte8029()) {
+            return self::$defaultCharset['mysql_8_29'];
+        }
+
+        return self::$defaultCharset[$this->getSqlVersion()] ??
+            self::$defaultCharset['default'];
+    }
+
+    /**
+     * Get default collation based on sql version
+     *
+     * @return string
+     */
+    private function getDefaultCollation(): string
+    {
+        if ($this->sqlVersionProvider->isMysqlGte8029()) {
+            return self::$defaultCollation['mysql_8_29'];
+        }
+
+        return self::$defaultCollation[$this->getSqlVersion()] ??
+            self::$defaultCollation['default'];
+    }
+
+    /**
+     * Get sql version
+     *
+     * @return string
+     */
+    private function getSqlVersion(): string
+    {
+        if ($this->sqlVersion === null) {
+            $this->sqlVersion = $this->sqlVersionProvider->getSqlVersion();
+        }
+
+        return $this->sqlVersion;
+    }
 }
