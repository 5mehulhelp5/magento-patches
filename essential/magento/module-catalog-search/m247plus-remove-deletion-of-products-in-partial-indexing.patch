diff --git a/Model/Indexer/Fulltext.php b/Model/Indexer/Fulltext.php
index 996da03..425a3b5 100644
--- a/Model/Indexer/Fulltext.php
+++ b/Model/Indexer/Fulltext.php
@@ -223,17 +223,39 @@ class Fulltext implements
             if (in_array(StackedActionsIndexerInterface::class, class_implements($saveHandler))) {
                 try {
                     $saveHandler->enableStackedActions();
-                    $saveHandler->deleteIndex($dimensions, new \ArrayIterator($productIds));
+                    // BEGIN PATCH
+                    // We are removing full delete in order for it to happen directly during indexing done by ElasticSuite
+                    // That way we minimize gap when products data is missing inside ElasticSearch
+                    // $saveHandler->deleteIndex($dimensions, new \ArrayIterator($productIds));
+                    // Following code covers case of deleted products that should be removed from index
+                    $deletedIds = $this->getDeletedIds($productIds, $storeId);
+
+                    if (!empty($deletedIds)) {
+                        $saveHandler->deleteIndex($dimensions, new \ArrayIterator($deletedIds));
+                    }
+                    // END PATCH
                     $saveHandler->saveIndex($dimensions, $this->fullAction->rebuildStoreIndex($storeId, $productIds));
                     $saveHandler->triggerStackedActions();
                     $saveHandler->disableStackedActions();
                 } catch (\Throwable $exception) {
                     $saveHandler->disableStackedActions();
-                    $saveHandler->deleteIndex($dimensions, new \ArrayIterator($productIds));
+                    // BEGIN PATCH
+                    $deletedIds = $this->getDeletedIds($productIds, $storeId);
+
+                    if (!empty($deletedIds)) {
+                        $saveHandler->deleteIndex($dimensions, new \ArrayIterator($deletedIds));
+                    }
+                    // END PATCH
                     $saveHandler->saveIndex($dimensions, $this->fullAction->rebuildStoreIndex($storeId, $productIds));
                 }
             } else {
-                $saveHandler->deleteIndex($dimensions, new \ArrayIterator($productIds));
+                // BEGIN PATCH
+                $deletedIds = $this->getDeletedIds($productIds, $storeId);
+
+                if (!empty($deletedIds)) {
+                    $saveHandler->deleteIndex($dimensions, new \ArrayIterator($deletedIds));
+                }
+                // END PATCH
                 $saveHandler->saveIndex($dimensions, $this->fullAction->rebuildStoreIndex($storeId, $productIds));
             }
         }
@@ -277,4 +299,28 @@ class Fulltext implements
     {
         $this->execute([$id]);
     }
-}
+
+    /**
+     * @param int[] $productIdsForReindex
+     * @param int $storeId
+     * @return int[]
+     */
+    public function getDeletedIds($productIdsForReindex, $storeId)
+    {
+        $catagoryIndexTable = ObjectManager::getInstance()
+            ->get(\Magento\Catalog\Model\Indexer\Category\Product\TableMaintainer::class)
+            ->getMainTable($storeId);
+        $connection = $this->fulltextResource->getConnection();
+        $select = $connection->select();
+        $select->from(['e' => $connection->getTableName('catalog_product_entity')], 'entity_id');
+        $select->join(
+            ['ccp' => $catagoryIndexTable],
+            'ccp.product_id = e.entity_id AND ccp.store_id = ' . $storeId,
+            []
+        );
+        $select->where('e.entity_id IN (?)', $productIdsForReindex);
+        $foundProductIds = $connection->fetchCol($select);
+
+        return array_diff($productIdsForReindex, $foundProductIds);
+    }
+}
\ No newline at end of file