diff --git a/src/Console/Command/ProcessChannelCommand.php b/src/Console/Command/ProcessChannelCommand.php
index b519ded..36ecbd8 100644
--- a/src/Console/Command/ProcessChannelCommand.php
+++ b/src/Console/Command/ProcessChannelCommand.php
@@ -7,64 +7,39 @@ namespace Perfion\Connector\Console\Command;
 use Magento\Framework\Api\Filter;
 use Magento\Framework\Api\Search\FilterGroup;
 use Magento\Framework\Api\SearchCriteria;
-use Magento\Framework\Api\SortOrderBuilder;
-use Magento\Framework\Indexer\IndexerRegistry;
 use Perfion\Connector\Api;
-use Perfion\Connector\Api\ChannelBatchRepositoryInterface;
-use Perfion\Connector\Api\ChannelRepositoryInterface;
 use Perfion\Connector\Service;
-use Perfion\Connector\Service\ProcessBatch;
 use Symfony\Component\Console;
-use Perfion\Connector\Service\PostChannelProcess;

 class ProcessChannelCommand extends Console\Command\Command
 {
-    /** @var Api\ChannelRepositoryInterface */
-    private $channelRepository;
-
-    /** @var Service\ProcessBatch */
-    private $processService;
-
-    /** @var Api\ChannelBatchRepositoryInterface */
-    private $batchRepository;
-
-    /** @var SortOrderBuilder */
-    private $sortOrderBuilder;
-
-    /** @var PostChannelProcess */
-    private $postChannelProcess;
-
-    /** @var IndexerRegistry */
-    private IndexerRegistry $indexerRegistry;
+    protected \Perfion\Connector\Api\ChannelRepositoryInterfaceFactory $channelRepositoryFactory;
+    protected \Perfion\Connector\Api\ChannelBatchRepositoryInterfaceFactory $batchRepositoryFactory;
+    protected \Perfion\Connector\Service\ProcessBatchFactory $processServiceFactory;
+    protected \Magento\Framework\Api\SortOrderBuilderFactory $sortOrderBuilderFactory;
+    protected \Perfion\Connector\Service\PostChannelProcessFactory $postChannelProcessFactory;
+    protected \Magento\Framework\Indexer\IndexerRegistryFactory $indexerRegistryFactory;

     /** @var array */
     private array $indexes;

-    /**
-     * @param ChannelRepositoryInterface $channelRepository
-     * @param ChannelBatchRepositoryInterface $batchRepository
-     * @param ProcessBatch $processService
-     * @param SortOrderBuilder $sortOrderBuilder
-     * @param PostChannelProcess $postChannelProcess
-     * @param IndexerRegistry $indexerRegistry
-     * @param array $indexes
-     */
     public function __construct(
-        Api\ChannelRepositoryInterface $channelRepository,
-        Api\ChannelBatchRepositoryInterface $batchRepository,
-        Service\ProcessBatch $processService,
-        SortOrderBuilder $sortOrderBuilder,
-        PostChannelProcess $postChannelProcess,
-        IndexerRegistry $indexerRegistry,
+        \Perfion\Connector\Api\ChannelRepositoryInterfaceFactory $channelRepositoryFactory,
+        \Perfion\Connector\Api\ChannelBatchRepositoryInterfaceFactory $batchRepositoryFactory,
+        \Perfion\Connector\Service\ProcessBatchFactory $processServiceFactory,
+        \Magento\Framework\Api\SortOrderBuilderFactory $sortOrderBuilderFactory,
+        \Perfion\Connector\Service\PostChannelProcessFactory $postChannelProcessFactory,
+        \Magento\Framework\Indexer\IndexerRegistryFactory $indexerRegistryFactory,
         array $indexes
     ) {
         parent::__construct();
-        $this->channelRepository = $channelRepository;
-        $this->processService = $processService;
-        $this->batchRepository = $batchRepository;
-        $this->sortOrderBuilder = $sortOrderBuilder;
-        $this->postChannelProcess = $postChannelProcess;
-        $this->indexerRegistry = $indexerRegistry;
+
+        $this->channelRepositoryFactory = $channelRepositoryFactory;
+        $this->batchRepositoryFactory = $batchRepositoryFactory;
+        $this->processServiceFactory = $processServiceFactory;
+        $this->sortOrderBuilderFactory = $sortOrderBuilderFactory;
+        $this->postChannelProcessFactory = $postChannelProcessFactory;
+        $this->indexerRegistryFactory = $indexerRegistryFactory;
         $this->indexes = $indexes;
     }

@@ -115,7 +90,7 @@ class ProcessChannelCommand extends Console\Command\Command
         $log = new Console\Logger\ConsoleLogger($output);

         try {
-            $batch = $this->batchRepository->getById($batchId);
+            $batch = $this->batchRepositoryFactory->create()->getById($batchId);

             $output->writeLn(sprintf(
                 '<comment>Process batch #%s (%s)</comment>... </comment>',
@@ -123,8 +98,8 @@ class ProcessChannelCommand extends Console\Command\Command
                 $batch->getType()
             ));

-            $this->processService->process($batch, $log);
-            $this->batchRepository->save($batch);
+            $this->processServiceFactory->create()->process($batch, $log);
+            $this->batchRepositoryFactory->create()->save($batch);

             $output->writeln('<info>✓</info>');

@@ -149,7 +124,7 @@ class ProcessChannelCommand extends Console\Command\Command

         foreach ($this->indexes as $index) {
             try {
-                $indexer = $this->indexerRegistry->get($index);
+                $indexer = $this->indexerRegistryFactory->create()->get($index);
                 $indexer->getView()->suspend();
             } catch (\Exception $exception) {
                 $log->error($exception->getMessage());
@@ -161,14 +136,15 @@ class ProcessChannelCommand extends Console\Command\Command
                 continue;
             }

-            $batchIds = $this->batchRepository->getPendingIdsByChannel($channel);
+            $batchIds = $this->batchRepositoryFactory->create()->getPendingIdsByChannel($channel);
             if (count($batchIds) > 0) {
                 $output->writeln(sprintf('<comment>Processing channel `%s`</comment>', $channel->getCode()));
                 $output->writeln(sprintf("\t<info>%s batches found.</info>", count($batchIds)));

                 foreach ($batchIds as $batchId) {
                     try {
-                        $batch = $this->batchRepository->getById((int) $batchId);
+                        $batchRepository = $this->batchRepositoryFactory->create();
+                        $batch = $batchRepository->getById((int) $batchId);

                         $start = microtime(true);
                         $output->write(sprintf(
@@ -180,14 +156,14 @@ class ProcessChannelCommand extends Console\Command\Command
                         if($payload === null || $payload ===""){
                             $output->writeln("<info>Received payload did not contain any XML, skipping batch (setting complete status)</info>");
                             $batch->setStatus(1);
-                            $this->batchRepository->save($batch);
+                            $batchRepository->save($batch);
                             continue;
                         }
                         $xml = \simplexml_load_string($batch->getPayload());

-                        $this->postChannelProcess->gatherData($channel, $xml);
-                        $this->processService->process($batch, $log);
-                        $this->batchRepository->save($batch);
+                        $this->postChannelProcessFactory->create()->gatherData($channel, $xml);
+                        $this->processServiceFactory->create()->process($batch, $log);
+                        $batchRepository->save($batch);

                         $duration = microtime(true) - $start;
                         $output->writeln(sprintf('<info>✓</info> %.1fs', $duration));
@@ -198,7 +174,7 @@ class ProcessChannelCommand extends Console\Command\Command
                 }
             }
             try {
-                $this->postChannelProcess->process($channel, $output);
+                $this->postChannelProcessFactory->create()->process($channel, $output);
             } catch (\Exception $exception) {
                 $output->writeln(sprintf('<error>An error encountered post channel process:</error> %s.', $exception->getMessage()));
             }
@@ -206,7 +182,7 @@ class ProcessChannelCommand extends Console\Command\Command

         foreach ($this->indexes as $index) {
             try {
-                $indexer = $this->indexerRegistry->get($index);
+                $indexer = $this->indexerRegistryFactory->create()->get($index);
                 $indexer->getView()->resume();
             } catch (\Exception $exception) {
                 $log->error($exception->getMessage());
@@ -239,12 +215,13 @@ class ProcessChannelCommand extends Console\Command\Command
             $searchCriteria->setFilterGroups([$group]);
         }

+        $sortOrderBuilder = $this->sortOrderBuilderFactory->create();
         $searchCriteria->setSortOrders([
-            $this->sortOrderBuilder->setField('priority')->setAscendingDirection()->create(),
-            $this->sortOrderBuilder->setField('code')->setAscendingDirection()->create()
+            $sortOrderBuilder->setField('priority')->setAscendingDirection()->create(),
+            $sortOrderBuilder->setField('code')->setAscendingDirection()->create()
         ]);

-        $result = $this->channelRepository->getList($searchCriteria);
+        $result = $this->channelRepositoryFactory->create()->getList($searchCriteria);

         return $result->getItems();
     }
diff --git a/src/Console/Command/RunChannelCommand.php b/src/Console/Command/RunChannelCommand.php
index 926322a..ce004d4 100644
--- a/src/Console/Command/RunChannelCommand.php
+++ b/src/Console/Command/RunChannelCommand.php
@@ -12,82 +12,49 @@ use Magento\Framework\Api\AttributeValueFactory;
 use Magento\Framework\Api\Filter;
 use Magento\Framework\Api\Search\FilterGroup;
 use Magento\Framework\Api\SearchCriteria;
-use Magento\Framework\Api\SortOrderBuilder;
 use Magento\Framework\App\Area;
 use Magento\Framework\Exception\LocalizedException;
 use Magento\Framework\Exception\NoSuchEntityException;
 use Magento\Framework\Indexer\ConfigInterface;
-use Magento\Framework\Indexer\IndexerRegistry;
 use Magento\Framework\Registry;
 use Perfion\Connector\Api;
-use Perfion\Connector\Api\ChannelBatchRepositoryInterface;
 use Perfion\Connector\Api\ChannelRepositoryInterface;
 use Perfion\Connector\Service;
-use Perfion\Connector\Service\FetchChannel;
-use Perfion\Connector\Service\ProcessBatch;
 use Symfony\Component\Console;
 use Magento\Catalog\Model\ProductLink\Link;
-use Perfion\Connector\Service\PostChannelProcess;

 class RunChannelCommand extends Console\Command\Command
 {
-    /** @var Service\FetchChannel */
-    private $fetchService;

-    /** @var Api\ChannelRepositoryInterface */
-    private $channelRepository;
+    protected \Perfion\Connector\Api\ChannelRepositoryInterfaceFactory $channelRepositoryFactory;
+    protected \Perfion\Connector\Api\ChannelBatchRepositoryInterfaceFactory $batchRepositoryFactory;
+    protected \Perfion\Connector\Service\FetchChannelFactory $fetchServiceFactory;
+    protected \Perfion\Connector\Service\ProcessBatchFactory $processServiceFactory;
+    protected \Magento\Framework\Api\SortOrderBuilderFactory $sortOrderBuilderFactory;
+    protected \Magento\Framework\Indexer\IndexerRegistryFactory $indexerRegistryFactory;
+    protected Registry $registry;
+    protected \Perfion\Connector\Service\PostChannelProcessFactory $postChannelProcessFactory;

-    /** @var Api\ChannelBatchRepositoryInterface */
-    private $batchRepository;
-
-    /** @var Service\ProcessBatch */
-    private $processService;
-
-    /** @var SortOrderBuilder */
-    private $sortOrderBuilder;
-
-    /** @var Registry */
-    private $registry;
-
-    /** @var PostChannelProcess */
-    private $postChannelProcess;
-
-    /** @var array */
-    private array $indexes;
-
-
-    /**
-     * @param ChannelRepositoryInterface $channelRepository
-     * @param ChannelBatchRepositoryInterface $batchRepository
-     * @param FetchChannel $fetchService
-     * @param ProcessBatch $processService
-     * @param SortOrderBuilder $sortOrderBuilder
-     * @param IndexerRegistry $indexerRegistry
-     * @param Registry $registry
-     * @param PostChannelProcess $postChannelProcess
-     * @param array $indexes
-     */
     public function __construct(
-        Api\ChannelRepositoryInterface                      $channelRepository,
-        Api\ChannelBatchRepositoryInterface                 $batchRepository,
-        Service\FetchChannel                                $fetchService,
-        Service\ProcessBatch                                $processService,
-        SortOrderBuilder                                    $sortOrderBuilder,
-        IndexerRegistry                                     $indexerRegistry,
-        Registry                                            $registry,
-        PostChannelProcess                                  $postChannelProcess,
-        array                                               $indexes
+        \Perfion\Connector\Api\ChannelRepositoryInterfaceFactory $channelRepositoryFactory,
+        \Perfion\Connector\Api\ChannelBatchRepositoryInterfaceFactory $batchRepositoryFactory,
+        \Perfion\Connector\Service\FetchChannelFactory $fetchServiceFactory,
+        \Perfion\Connector\Service\ProcessBatchFactory $processServiceFactory,
+        \Magento\Framework\Api\SortOrderBuilderFactory $sortOrderBuilderFactory,
+        \Magento\Framework\Indexer\IndexerRegistryFactory $indexerRegistryFactory,
+        Registry $registry,
+        \Perfion\Connector\Service\PostChannelProcessFactory $postChannelProcessFactory,
+        array $indexes
     ) {
         parent::__construct();
-        $this->channelRepository = $channelRepository;
-        $this->batchRepository = $batchRepository;
-        $this->processService = $processService;
-        $this->fetchService = $fetchService;
-        $this->sortOrderBuilder = $sortOrderBuilder;
-        $this->indexerRegistry = $indexerRegistry;
+        $this->channelRepositoryFactory = $channelRepositoryFactory;
+        $this->batchRepositoryFactory = $batchRepositoryFactory;
+        $this->fetchServiceFactory = $fetchServiceFactory;
+        $this->processServiceFactory = $processServiceFactory;
+        $this->sortOrderBuilderFactory = $sortOrderBuilderFactory;
+        $this->indexerRegistryFactory = $indexerRegistryFactory;
         $this->registry = $registry;
-        $this->postChannelProcess = $postChannelProcess;
-        $this->indexes = $indexes;
+        $this->postChannelProcessFactory = $postChannelProcessFactory;
     }

     /**
@@ -130,7 +97,7 @@ class RunChannelCommand extends Console\Command\Command

         foreach ($this->indexes as $index) {
             try {
-                $indexer = $this->indexerRegistry->get($index);
+                $indexer = $this->indexerRegistryFactory->create()->get($index);
                 $indexer->getView()->suspend();
             } catch (\Exception $exception) {
                 $log->error($exception->getMessage());
@@ -147,7 +114,7 @@ class RunChannelCommand extends Console\Command\Command

             try {

-                $batches = $this->fetchService->fetch($channel, $log);
+                $batches = $this->fetchServiceFactory->create()->fetch($channel, $log);
                 $output->writeln(sprintf("\t<info>✓</info> received %s batches", count($batches)));
                 $batchSkus = [];
                 $productWebsites = [];
@@ -155,7 +122,8 @@ class RunChannelCommand extends Console\Command\Command
                 $categoriesPerfionId = [];
                 $categoryStores = [];
                 $relatedProducts = [];
-                $batches = $this->batchRepository->getPendingByChannel($channel);
+                $batchRepository = $this->batchRepositoryFactory->create();
+                $batches = $batchRepository->getPendingByChannel($channel);
                 foreach ($batches as $batch) {
                     try {
                         $output->write(sprintf(
@@ -164,9 +132,9 @@ class RunChannelCommand extends Console\Command\Command
                         ));
                         $xml = \simplexml_load_string($batch->getPayload());
                         $channelName = $xml->Result->Channel->attributes()['name'];
-                        $this->postChannelProcess->gatherData($channel, $xml);
-                        $this->processService->process($batch, $log);
-                        $this->batchRepository->save($batch);
+                        $this->postChannelProcessFactory->create()->gatherData($channel, $xml);
+                        $this->processServiceFactory->create()->process($batch, $log);
+                        $batchRepository->save($batch);

                         $output->writeln('<info>✓</info>');
                     } catch (\Exception $e) {
@@ -175,7 +143,7 @@ class RunChannelCommand extends Console\Command\Command
                     }
                 }
                 try {
-                    $this->postChannelProcess->process($channel, $output);
+                    $this->postChannelProcessFactory->create()->process($channel, $output);
                 } catch (\Exception $exception) {
                     $output->writeln(sprintf('<error>An error encountered post channel process:</error> %s.', $exception->getMessage()));
                 }
@@ -187,7 +155,7 @@ class RunChannelCommand extends Console\Command\Command

         foreach ($this->indexes as $index) {
             try {
-                $indexer = $this->indexerRegistry->get($index);
+                $indexer = $this->indexerRegistryFactory->create()->get($index);
                 $indexer->getView()->resume();
             } catch (\Exception $exception) {
                 $log->error($exception->getMessage());
@@ -219,12 +187,13 @@ class RunChannelCommand extends Console\Command\Command
             $searchCriteria->setFilterGroups([$group]);
         }

+        $sortOrderBuilder = $this->sortOrderBuilderFactory->create();
         $searchCriteria->setSortOrders([
-            $this->sortOrderBuilder->setField('priority')->setAscendingDirection()->create(),
-            $this->sortOrderBuilder->setField('code')->setAscendingDirection()->create()
+            $sortOrderBuilder->setField('priority')->setAscendingDirection()->create(),
+            $sortOrderBuilder->setField('code')->setAscendingDirection()->create()
         ]);

-        $result = $this->channelRepository->getList($searchCriteria);
+        $result = $this->channelRepositoryFactory->create()->getList($searchCriteria);

         return $result->getItems();
     }
